from PyInquirer import prompt, print_json, Separator

from cmd import Cmd

from auth import check_auth, auth, logout
from helpers import clearConsole, big_print, parse_flags

from models.user import User
from models.letter import show_letter_plot

from prettytable import PrettyTable

from PyInquirer import prompt
from questions.letter import q_address, q_recipient, q_create 


class MyPrompt(Cmd):
    prompt = '> '
    doc_header = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤–≤–µ–¥–∏—Ç–µ help <—Ç–µ–º–∞>):"
    misc_header = "–†–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å–ø—Ä–∞–≤–∫–∏:"
    intro = "–í–≤–µ–¥–∏—Ç–µ help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"

    def preloop(self):
        big_print('Postal Logistics')
        user = check_auth()
        if user:
            big_print('Hi, '+user['full_name'])
            self.prompt = '{0}/{1}: '.format(user['role'], user['username'])
            self.user = User(**user)
        else:
            clearConsole()
            print('–ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
            self.preloop()

    def do_logout(self,inp):
        logout()
        self.prompt = '> '
        clearConsole()
        self.preloop()
    def help_logout(self):
        print('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')

    def do_my_user_info(self, inp):
        print(self.user)
    def help_my_user_info(self):
        print('–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')

    def do_show_letters(self, inp):
        params = parse_flags(inp)
        # print('params', params)
        letters = self.user.get_letters()
        if not letters:
            print('–¢–∞–±–ª–∏—Ü–∞ –ø–∏—Å–µ–º - –ø—É—Å—Ç–∞')
        else:
            if params['plot']:
               show_letter_plot(letters) 
            else:
                x = PrettyTable()
                x.field_names = ["–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä","–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–ê–¥—Ä–µ—Å", "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–≠–∫—Å–ø—Ä–µ—Å—Å"]
                for i in letters:
                    x.add_row(i.get_data_from_table())
                print(x)
    def help_show_letters(self):
        print('\n–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\t--plot {bool} - –≤—ã–≤–µ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫\n')

    def do_create_letter(self, inp):
        if self.user.role == 'user':
            print('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
            return False
        print('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:')
        recipient = prompt(q_recipient)
        print('–ê–¥—Ä–µ—Å:')
        address = prompt(q_address)
        print('–î—Ä—É–≥–æ–µ:')
        other = prompt(q_create)
        new_letter = self.user.create_letter(recipient, address, **other)
        print(new_letter)
    def help_create_letter(self):
        print('–°–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ')

    def do_delete_letter(self, inp):
        params = parse_flags(inp)
        if not params['id']:
            print('–ù–µ –∑–∞–¥–∞–Ω –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä')
        else:
            result = self.user.delete_letter(params['id'])
            if result: 
                print('\n\t–ü–∏—Å—å–º–æ {0}, —É–¥–∞–ª–µ–Ω–æ\n'.format(params['id']))
            else:
                print('\n\t–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ {}\n'.format(params['id']))
    def help_delete_letter(self):
        print('\n–£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ id. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\t--id {id} - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏—Å—å–º–∞\n')

    def do_cls(self, inp):
        clearConsole()
    def help_cls(self):
        print('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å')

    def do_exit(self, inp):
        return True
    def help_exit(self):
        print('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ö–ª–∞–≤–∏—à–∏: Ctrl-D.')

    def default(self, inp):
        print("Default: {}".format(inp))

    def postloop(self):
        print("–ü–æ–∫–∞ üëã")

    do_EOF = do_exit
    help_EOF = help_exit

if __name__ == '__main__':
    MyPrompt().cmdloop()
